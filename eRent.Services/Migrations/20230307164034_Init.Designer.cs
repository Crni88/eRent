// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eRent.Services.DataDB;

#nullable disable

namespace eRent.Services.Migrations
{
    [DbContext(typeof(ERentContext))]
    [Migration("20230307164034_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eRent.Services.DataDB.Izvjestaj", b =>
                {
                    b.Property<int>("IzvjestajId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("izvjestajID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IzvjestajId"));

                    b.Property<DateTime?>("DatumIzdavanja")
                        .HasColumnType("datetime")
                        .HasColumnName("datumIzdavanja");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("korisnik_ID");

                    b.Property<int?>("VrstaIzvjestajaId")
                        .HasColumnType("int")
                        .HasColumnName("vrstaIzvjestajaID");

                    b.HasKey("IzvjestajId")
                        .HasName("PK_izvjestajID");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("VrstaIzvjestajaId");

                    b.ToTable("izvjestaj", (string)null);
                });

            modelBuilder.Entity("eRent.Services.DataDB.Korisnik", b =>
                {
                    b.Property<int>("KorisnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("korisnikID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikId"));

                    b.Property<int?>("BrojOcjena")
                        .HasColumnType("int")
                        .HasColumnName("brojOcjena");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FcmDeviceToken")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("fcmDeviceToken");

                    b.Property<string>("KorisnikPrezime")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("korisnikPrezime");

                    b.Property<string>("KorsnikIme")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("korsnikIme");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lozinkaHash");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lozinkaSalt");

                    b.Property<double?>("Rejting")
                        .HasColumnType("float")
                        .HasColumnName("rejting");

                    b.Property<int?>("UlogaId")
                        .HasColumnType("int")
                        .HasColumnName("ulogaId");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("KorisnikId")
                        .HasName("PK_korisnikID");

                    b.HasIndex("UlogaId");

                    b.ToTable("korisnik", (string)null);
                });

            modelBuilder.Entity("eRent.Services.DataDB.KorisnikTagovi", b =>
                {
                    b.Property<int>("KtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ktID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KtId"));

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("korisnikID");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tagID");

                    b.HasKey("KtId")
                        .HasName("PK_taggingsID");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("TagId");

                    b.ToTable("korisnikTagovi", (string)null);
                });

            modelBuilder.Entity("eRent.Services.DataDB.Nekretnina", b =>
                {
                    b.Property<int>("NekretninaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("nekretninaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NekretninaId"));

                    b.Property<int>("BrojSoba")
                        .HasColumnType("int")
                        .HasColumnName("brojSoba");

                    b.Property<int?>("Brojkvadrata")
                        .HasColumnType("int")
                        .HasColumnName("brojkvadrata");

                    b.Property<int>("Cijena")
                        .HasColumnType("int")
                        .HasColumnName("cijena");

                    b.Property<DateTime>("DatumObjave")
                        .HasColumnType("datetime")
                        .HasColumnName("datumObjave");

                    b.Property<string>("Grad")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Izdvojena")
                        .HasColumnType("bit")
                        .HasColumnName("izdvojena");

                    b.Property<int>("KorisnikNekretnina")
                        .HasColumnType("int")
                        .HasColumnName("korisnikNekretnina");

                    b.Property<bool?>("Namještena")
                        .HasColumnType("bit")
                        .HasColumnName("namještena");

                    b.Property<string>("NazivNekretnine")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nazivNekretnine");

                    b.Property<string>("Opis")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("opis");

                    b.Property<bool?>("Popunjena")
                        .HasColumnType("bit")
                        .HasColumnName("popunjena");

                    b.Property<string>("Slika")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("slika");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("NekretninaId")
                        .HasName("PK_nekretninaID");

                    b.HasIndex("KorisnikNekretnina");

                    b.ToTable("nekretnina", (string)null);
                });

            modelBuilder.Entity("eRent.Services.DataDB.NekretninaKorisnik", b =>
                {
                    b.Property<int>("NekretninaKorisnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("nekretninaKorisnikID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NekretninaKorisnikId"));

                    b.Property<string>("BrojTelefona")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("brojTelefona");

                    b.Property<DateTime?>("DatumIseljenja")
                        .HasColumnType("datetime")
                        .HasColumnName("datumIseljenja");

                    b.Property<DateTime?>("DatumUseljenja")
                        .HasColumnType("datetime")
                        .HasColumnName("datumUseljenja");

                    b.Property<string>("ImeKorisnika")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("imeKorisnika");

                    b.Property<int>("Nekretnina")
                        .HasColumnType("int")
                        .HasColumnName("nekretnina");

                    b.Property<string>("PrezimeKorisnika")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("prezimeKorisnika");

                    b.Property<string>("Slika")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("slika");

                    b.HasKey("NekretninaKorisnikId")
                        .HasName("PK_nekretninaKorisnikID");

                    b.HasIndex("Nekretnina");

                    b.ToTable("nekretninaKorisnik", (string)null);
                });

            modelBuilder.Entity("eRent.Services.DataDB.NekretninaRezervacija", b =>
                {
                    b.Property<int>("NekretninaRezervacija1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("nekretninaRezervacija");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NekretninaRezervacija1"));

                    b.Property<int?>("NekretninaId")
                        .HasColumnType("int")
                        .HasColumnName("nekretninaID");

                    b.Property<int?>("RezervacijaId")
                        .HasColumnType("int")
                        .HasColumnName("rezervacijaID");

                    b.HasKey("NekretninaRezervacija1")
                        .HasName("PK_NekretninaRezervacija");

                    b.HasIndex("NekretninaId");

                    b.HasIndex("RezervacijaId");

                    b.ToTable("nekretninaRezervacija", (string)null);
                });

            modelBuilder.Entity("eRent.Services.DataDB.NekretninaTagovi", b =>
                {
                    b.Property<int>("NtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ntID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NtId"));

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<int>("NekretninaId")
                        .HasColumnType("int")
                        .HasColumnName("nekretninaID");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tagID");

                    b.HasKey("NtId")
                        .HasName("ntID");

                    b.HasIndex("NekretninaId");

                    b.HasIndex("TagId");

                    b.ToTable("nekretninaTagovi", (string)null);
                });

            modelBuilder.Entity("eRent.Services.DataDB.PaymentRequest", b =>
                {
                    b.Property<int>("PaymentRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("paymentRequestId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentRequestId"));

                    b.Property<bool?>("IsProcessed")
                        .HasColumnType("bit")
                        .HasColumnName("isProcessed");

                    b.Property<double>("Iznos")
                        .HasColumnType("float")
                        .HasColumnName("iznos");

                    b.Property<string>("Komentar")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("komentar");

                    b.Property<int?>("KorisnikPaymentId")
                        .HasColumnType("int")
                        .HasColumnName("korisnikPaymentId");

                    b.Property<bool?>("Mjesecno")
                        .HasColumnType("bit")
                        .HasColumnName("mjesecno");

                    b.Property<string>("Naslov")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("naslov");

                    b.Property<string>("Nekretnina")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nekretnina");

                    b.Property<int>("NekretninaPayment")
                        .HasColumnType("int")
                        .HasColumnName("nekretninaPayment");

                    b.Property<string>("PaymentId")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("paymentId");

                    b.HasKey("PaymentRequestId")
                        .HasName("PK_paymentRequestId");

                    b.HasIndex("KorisnikPaymentId");

                    b.HasIndex("NekretninaPayment");

                    b.ToTable("paymentRequest", (string)null);
                });

            modelBuilder.Entity("eRent.Services.DataDB.Posjetum", b =>
                {
                    b.Property<int>("PosjetaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("posjetaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PosjetaId"));

                    b.Property<DateTime?>("DatumPosjete")
                        .HasColumnType("datetime")
                        .HasColumnName("datumPosjete");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("korisnikID");

                    b.Property<string>("KorisnikImePrezime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("korisnikImePrezime");

                    b.Property<string>("NazivNekretnine")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nazivNekretnine");

                    b.Property<int?>("NekretninaId")
                        .HasColumnType("int")
                        .HasColumnName("nekretninaID");

                    b.Property<string>("VrijemePosjete")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("vrijemePosjete");

                    b.HasKey("PosjetaId")
                        .HasName("PK_posjetaID");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("NekretninaId");

                    b.ToTable("posjeta", (string)null);
                });

            modelBuilder.Entity("eRent.Services.DataDB.Rejting", b =>
                {
                    b.Property<int>("RejtingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rejtingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RejtingId"));

                    b.Property<string>("ImePrezime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("imePrezime");

                    b.Property<string>("Komentar")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("komentar");

                    b.Property<int>("KorisnikPrim")
                        .HasColumnType("int")
                        .HasColumnName("korisnikPrim");

                    b.Property<int>("KorisnikSec")
                        .HasColumnType("int")
                        .HasColumnName("korisnikSec");

                    b.Property<string>("Nekretnina")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nekretnina");

                    b.Property<int>("NekretninaRejting")
                        .HasColumnType("int")
                        .HasColumnName("nekretninaRejting");

                    b.Property<double?>("OverallRejting")
                        .HasColumnType("float")
                        .HasColumnName("overallRejting");

                    b.Property<double?>("Rejting1")
                        .HasColumnType("float")
                        .HasColumnName("rejting");

                    b.HasKey("RejtingId")
                        .HasName("PK_rejtingId");

                    b.HasIndex("KorisnikPrim");

                    b.HasIndex("KorisnikSec");

                    b.HasIndex("NekretninaRejting");

                    b.ToTable("rejting", (string)null);
                });

            modelBuilder.Entity("eRent.Services.DataDB.Rezervacija", b =>
                {
                    b.Property<int>("RezervacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rezervacijaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RezervacijaId"));

                    b.Property<string>("BrojTelefona")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("broj_telefona");

                    b.Property<DateTime?>("DatumKraja")
                        .HasColumnType("date")
                        .HasColumnName("datumKraja");

                    b.Property<DateTime?>("DatumPocetka")
                        .HasColumnType("date")
                        .HasColumnName("datumPocetka");

                    b.Property<string>("ImePrezime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ime_prezime");

                    b.Property<bool?>("MjesecnaRezervacija")
                        .HasColumnType("bit")
                        .HasColumnName("mjesecnaRezervacija");

                    b.Property<string>("Nazivnekretnine")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nazivnekretnine");

                    b.Property<int>("NekretninaId")
                        .HasColumnType("int")
                        .HasColumnName("nekretninaId");

                    b.Property<bool?>("Odobrena")
                        .HasColumnType("bit")
                        .HasColumnName("odobrena");

                    b.HasKey("RezervacijaId")
                        .HasName("PK_rezervacijaID");

                    b.HasIndex("NekretninaId");

                    b.ToTable("rezervacija", (string)null);
                });

            modelBuilder.Entity("eRent.Services.DataDB.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tagName");

                    b.HasKey("TagId")
                        .HasName("PK_tagsID");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("eRent.Services.DataDB.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NekretninaTask")
                        .HasColumnType("int")
                        .HasColumnName("nekretninaTask");

                    b.Property<string>("Priority")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TaskId")
                        .HasName("PK__Tasks__7C6949B1B77D3CB0");

                    b.HasIndex("NekretninaTask");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("eRent.Services.DataDB.Ugovor", b =>
                {
                    b.Property<int>("UgovorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ugovorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UgovorId"));

                    b.Property<DateTime?>("DatumIstekaUgovora")
                        .HasColumnType("datetime")
                        .HasColumnName("datumIstekaUgovora");

                    b.Property<DateTime?>("DatumSklapanjaUgovora")
                        .HasColumnType("datetime")
                        .HasColumnName("datumSklapanjaUgovora");

                    b.Property<string>("Nekretnina")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nekretnina");

                    b.Property<int>("NekretninaId")
                        .HasColumnType("int")
                        .HasColumnName("nekretninaID");

                    b.Property<string>("PodnosiocUgovora")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("podnosiocUgovora");

                    b.Property<int>("PodnosiocUgovoraId")
                        .HasColumnType("int")
                        .HasColumnName("podnosiocUgovoraID");

                    b.Property<string>("UgovornaStranka")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ugovornaStranka");

                    b.HasKey("UgovorId")
                        .HasName("PK_ugovorID");

                    b.HasIndex("NekretninaId");

                    b.HasIndex("PodnosiocUgovoraId");

                    b.ToTable("ugovor", (string)null);
                });

            modelBuilder.Entity("eRent.Services.DataDB.Uloga", b =>
                {
                    b.Property<int>("UlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ulogaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UlogaId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("naziv");

                    b.Property<string>("Opis")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("opis");

                    b.HasKey("UlogaId")
                        .HasName("PK_ulogaID");

                    b.ToTable("uloga", (string)null);
                });

            modelBuilder.Entity("eRent.Services.DataDB.VrstaIzvjestaja", b =>
                {
                    b.Property<int>("VrstaIzvjestajaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("vrstaIzvjestajaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VrstaIzvjestajaId"));

                    b.Property<string>("NazivIzvjestaja")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nazivIzvjestaja");

                    b.HasKey("VrstaIzvjestajaId")
                        .HasName("PK_vrstaIzvjestajaID");

                    b.ToTable("vrstaIzvjestaja", (string)null);
                });

            modelBuilder.Entity("eRent.Services.DataDB.Izvjestaj", b =>
                {
                    b.HasOne("eRent.Services.DataDB.Korisnik", "Korisnik")
                        .WithMany("Izvjestajs")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_korisnik_ID");

                    b.HasOne("eRent.Services.DataDB.VrstaIzvjestaja", "VrstaIzvjestaja")
                        .WithMany("Izvjestajs")
                        .HasForeignKey("VrstaIzvjestajaId")
                        .HasConstraintName("FK_vrstaIzvjestajaID");

                    b.Navigation("Korisnik");

                    b.Navigation("VrstaIzvjestaja");
                });

            modelBuilder.Entity("eRent.Services.DataDB.Korisnik", b =>
                {
                    b.HasOne("eRent.Services.DataDB.Uloga", "Uloga")
                        .WithMany("Korisniks")
                        .HasForeignKey("UlogaId")
                        .HasConstraintName("FK__korisnik__ulogaI__1CBC4616");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("eRent.Services.DataDB.KorisnikTagovi", b =>
                {
                    b.HasOne("eRent.Services.DataDB.Korisnik", "Korisnik")
                        .WithMany("KorisnikTagovis")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FK_korisnikId");

                    b.HasOne("eRent.Services.DataDB.Tag", "Tag")
                        .WithMany("KorisnikTagovis")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK_korisnikTagID");

                    b.Navigation("Korisnik");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("eRent.Services.DataDB.Nekretnina", b =>
                {
                    b.HasOne("eRent.Services.DataDB.Korisnik", "KorisnikNekretninaNavigation")
                        .WithMany("Nekretninas")
                        .HasForeignKey("KorisnikNekretnina")
                        .IsRequired()
                        .HasConstraintName("FK_korisnikNekretnina");

                    b.Navigation("KorisnikNekretninaNavigation");
                });

            modelBuilder.Entity("eRent.Services.DataDB.NekretninaKorisnik", b =>
                {
                    b.HasOne("eRent.Services.DataDB.Nekretnina", "NekretninaNavigation")
                        .WithMany("NekretninaKorisniks")
                        .HasForeignKey("Nekretnina")
                        .IsRequired()
                        .HasConstraintName("FK_nekretninaKorisnik");

                    b.Navigation("NekretninaNavigation");
                });

            modelBuilder.Entity("eRent.Services.DataDB.NekretninaRezervacija", b =>
                {
                    b.HasOne("eRent.Services.DataDB.Nekretnina", "Nekretnina")
                        .WithMany("NekretninaRezervacijas")
                        .HasForeignKey("NekretninaId")
                        .HasConstraintName("FK_nekretninaRezervacijaID");

                    b.HasOne("eRent.Services.DataDB.Rezervacija", "Rezervacija")
                        .WithMany("NekretninaRezervacijas")
                        .HasForeignKey("RezervacijaId")
                        .HasConstraintName("FK_nekretninaRezervacija");

                    b.Navigation("Nekretnina");

                    b.Navigation("Rezervacija");
                });

            modelBuilder.Entity("eRent.Services.DataDB.NekretninaTagovi", b =>
                {
                    b.HasOne("eRent.Services.DataDB.Nekretnina", "Nekretnina")
                        .WithMany("NekretninaTagovis")
                        .HasForeignKey("NekretninaId")
                        .IsRequired()
                        .HasConstraintName("FK__nekretnin__nekre__00AA174D");

                    b.HasOne("eRent.Services.DataDB.Tag", "Tag")
                        .WithMany("NekretninaTagovis")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK_tagID");

                    b.Navigation("Nekretnina");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("eRent.Services.DataDB.PaymentRequest", b =>
                {
                    b.HasOne("eRent.Services.DataDB.Korisnik", "KorisnikPayment")
                        .WithMany("PaymentRequests")
                        .HasForeignKey("KorisnikPaymentId")
                        .HasConstraintName("FK_korisnikPaymentId");

                    b.HasOne("eRent.Services.DataDB.Nekretnina", "NekretninaPaymentNavigation")
                        .WithMany("PaymentRequests")
                        .HasForeignKey("NekretninaPayment")
                        .IsRequired()
                        .HasConstraintName("FK_nekretninaPayment");

                    b.Navigation("KorisnikPayment");

                    b.Navigation("NekretninaPaymentNavigation");
                });

            modelBuilder.Entity("eRent.Services.DataDB.Posjetum", b =>
                {
                    b.HasOne("eRent.Services.DataDB.Korisnik", "Korisnik")
                        .WithMany("Posjeta")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_korisnikPosjeta");

                    b.HasOne("eRent.Services.DataDB.Nekretnina", "Nekretnina")
                        .WithMany("Posjeta")
                        .HasForeignKey("NekretninaId")
                        .HasConstraintName("FK_nekretninaPosjeta");

                    b.Navigation("Korisnik");

                    b.Navigation("Nekretnina");
                });

            modelBuilder.Entity("eRent.Services.DataDB.Rejting", b =>
                {
                    b.HasOne("eRent.Services.DataDB.Korisnik", "KorisnikPrimNavigation")
                        .WithMany("RejtingKorisnikPrimNavigations")
                        .HasForeignKey("KorisnikPrim")
                        .IsRequired()
                        .HasConstraintName("FK_korisnikPrim");

                    b.HasOne("eRent.Services.DataDB.Korisnik", "KorisnikSecNavigation")
                        .WithMany("RejtingKorisnikSecNavigations")
                        .HasForeignKey("KorisnikSec")
                        .IsRequired()
                        .HasConstraintName("FK_korisnikSec");

                    b.HasOne("eRent.Services.DataDB.Nekretnina", "NekretninaRejtingNavigation")
                        .WithMany("Rejtings")
                        .HasForeignKey("NekretninaRejting")
                        .IsRequired()
                        .HasConstraintName("FK_nekretninaRejting");

                    b.Navigation("KorisnikPrimNavigation");

                    b.Navigation("KorisnikSecNavigation");

                    b.Navigation("NekretninaRejtingNavigation");
                });

            modelBuilder.Entity("eRent.Services.DataDB.Rezervacija", b =>
                {
                    b.HasOne("eRent.Services.DataDB.Nekretnina", "Nekretnina")
                        .WithMany("Rezervacijas")
                        .HasForeignKey("NekretninaId")
                        .IsRequired()
                        .HasConstraintName("FK_nekretninaId");

                    b.Navigation("Nekretnina");
                });

            modelBuilder.Entity("eRent.Services.DataDB.Task", b =>
                {
                    b.HasOne("eRent.Services.DataDB.Nekretnina", "NekretninaTaskNavigation")
                        .WithMany("Tasks")
                        .HasForeignKey("NekretninaTask")
                        .IsRequired()
                        .HasConstraintName("FK_nekretninaTask");

                    b.Navigation("NekretninaTaskNavigation");
                });

            modelBuilder.Entity("eRent.Services.DataDB.Ugovor", b =>
                {
                    b.HasOne("eRent.Services.DataDB.Nekretnina", "NekretninaNavigation")
                        .WithMany("Ugovors")
                        .HasForeignKey("NekretninaId")
                        .IsRequired()
                        .HasConstraintName("FK_ugovor_nekretnina");

                    b.HasOne("eRent.Services.DataDB.Korisnik", "PodnosiocUgovoraNavigation")
                        .WithMany("Ugovors")
                        .HasForeignKey("PodnosiocUgovoraId")
                        .IsRequired()
                        .HasConstraintName("FK_podnosiocUgovoraID");

                    b.Navigation("NekretninaNavigation");

                    b.Navigation("PodnosiocUgovoraNavigation");
                });

            modelBuilder.Entity("eRent.Services.DataDB.Korisnik", b =>
                {
                    b.Navigation("Izvjestajs");

                    b.Navigation("KorisnikTagovis");

                    b.Navigation("Nekretninas");

                    b.Navigation("PaymentRequests");

                    b.Navigation("Posjeta");

                    b.Navigation("RejtingKorisnikPrimNavigations");

                    b.Navigation("RejtingKorisnikSecNavigations");

                    b.Navigation("Ugovors");
                });

            modelBuilder.Entity("eRent.Services.DataDB.Nekretnina", b =>
                {
                    b.Navigation("NekretninaKorisniks");

                    b.Navigation("NekretninaRezervacijas");

                    b.Navigation("NekretninaTagovis");

                    b.Navigation("PaymentRequests");

                    b.Navigation("Posjeta");

                    b.Navigation("Rejtings");

                    b.Navigation("Rezervacijas");

                    b.Navigation("Tasks");

                    b.Navigation("Ugovors");
                });

            modelBuilder.Entity("eRent.Services.DataDB.Rezervacija", b =>
                {
                    b.Navigation("NekretninaRezervacijas");
                });

            modelBuilder.Entity("eRent.Services.DataDB.Tag", b =>
                {
                    b.Navigation("KorisnikTagovis");

                    b.Navigation("NekretninaTagovis");
                });

            modelBuilder.Entity("eRent.Services.DataDB.Uloga", b =>
                {
                    b.Navigation("Korisniks");
                });

            modelBuilder.Entity("eRent.Services.DataDB.VrstaIzvjestaja", b =>
                {
                    b.Navigation("Izvjestajs");
                });
#pragma warning restore 612, 618
        }
    }
}
